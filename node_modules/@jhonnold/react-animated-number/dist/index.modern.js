import React from 'react';
import raf from 'raf';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var AnimatedNumber = function AnimatedNumber(props) {
  var number = props.number,
      _props$initial = props.initial,
      initial = _props$initial === void 0 ? 0 : _props$initial,
      _props$fps = props.fps,
      fps = _props$fps === void 0 ? 60 : _props$fps,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 250 : _props$duration,
      format = props.format,
      _props$component = props.component,
      C = _props$component === void 0 ? 'p' : _props$component,
      rest = _objectWithoutPropertiesLoose(props, ["number", "initial", "fps", "duration", "format", "component"]);

  var _React$useState = React.useState(initial),
      value = _React$useState[0],
      setValue = _React$useState[1];

  var previousValue = React.useRef(initial);
  var lastTimestamp = React.useRef(0);
  var startTimestamp = React.useRef(0);
  var handle = React.useRef();

  var shouldProcess = function shouldProcess(timestamp) {
    return !lastTimestamp.current || timestamp - lastTimestamp.current > 1000 / fps;
  };

  var animate = function animate(timestamp, reset) {
    if (!shouldProcess(timestamp)) {
      handle.current = raf(animate);
      return;
    }

    var pValue = reset ? value : previousValue.current;
    var sTimestamp = reset ? timestamp : startTimestamp.current;
    var nextValue;

    if (timestamp - sTimestamp >= duration) {
      nextValue = number;
    } else {
      var gap = number - pValue;
      var pctDuration = (timestamp - sTimestamp) / duration;
      nextValue = pValue + gap * pctDuration;
    }

    if (nextValue === number) {
      endAnimation();
      setValue(nextValue);
    } else {
      setValue(nextValue);
      previousValue.current = pValue;
      startTimestamp.current = sTimestamp;
      lastTimestamp.current = timestamp;
      handle.current = raf(animate);
    }
  };

  var startAnimation = function startAnimation() {
    handle.current = raf(function (timestamp) {
      animate(timestamp, true);
    });
  };

  var endAnimation = function endAnimation() {
    if (handle.current) raf.cancel(handle.current);
  };

  React.useEffect(function () {
    startAnimation();
    return function () {
      return endAnimation();
    };
  }, []);
  React.useEffect(function () {
    endAnimation();
    startAnimation();
  }, [number]);
  return React.createElement(C, Object.assign({}, rest), format ? format(value) : value);
};

export default AnimatedNumber;
//# sourceMappingURL=index.modern.js.map
